library(lme4)
experiment=2
doNoRedo=1
doDirect=0
if (experiment==2) {
directory=("P:\\3017048.04\\results\\Choices\\N62\\choicesRNR62.csv")
directoryDev=("P:\\3017048.04\\results\\Colorwheel\\N62\\MedianAcc62.csv")
directoryPrec=("P:\\3017048.04\\results\\Colorwheel\\N62\\precision62.csv")
directoryPrecLure=("P:\\3017048.04\\results\\Colorwheel\\N62\\precisionLure62.csv")
dirDirect=("P:\\3017048.04\\results\\Choices\\N62\\choicesRDir62.csv")
}else if (experiment==1) {
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRNR32.csv")
directoryDev=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\MedianAcc32.csv")
directoryPrec=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precision32.csv")
directoryPrecLure=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precisionLure32.csv")
dirDirect=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRDir32.csv")}
################## logistic regression model: No Redo
if (doNoRedo==1){
IPData=read.csv(file=directory,header=T,sep=',')
names(IPData)=c("participant","condition","setSize","easyOffer","choice","rt","block","button")
###performance data
devD=read.csv(file=directoryDev,header=T,sep=',') #deviance accuracy
attach(devD)
precD=read.csv(file=directoryPrec,header=T,sep=',') #precision accuracy
if (experiment==1) {
precD[ ,c(2,3)]=NULL}
attach(precD)
lurePrecD=read.csv(file=directoryPrecLure,header=T,sep=',') #precision from lure color
lurePrecD[ ,c(2,3)]=NULL
attach(lurePrecD)
#convert performance to long format
devLong=reshape(devD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
deviance=reshape2:::melt.data.frame(devLong,id.vars=c('subNo','setSize'),value.name="deviance",variable.name="condition",measure.vars=c("I","U"))
precLong=reshape(precD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
precision=reshape2:::melt.data.frame(precLong,id.vars=c('subNo','setSize'),value.name="precision",variable.name="condition",measure.vars=c("I","U"))
lurePrecLong=reshape(lurePrecD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
lurePrecision=reshape2:::melt.data.frame(lurePrecLong,id.vars=c('subNo','setSize'),value.name="lurePrecision",variable.name="condition",measure.vars=c("I","U"))
#replace no answer with NA in choice data
IPData$choice[IPData$choice==9]=NA
as.factor(IPData$condition)
IPData$dev=NA
IPData$prec=NA
IPData$lurePrec=NA
#assign deviance per cell
for (val in unique(IPData$participant)){
for (val2 in unique(IPData$setSize)){
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=deviance$deviance[deviance$subNo==val & deviance$condition=="I" & deviance$setSize==val2 ]
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=deviance$deviance[deviance$subNo==val & deviance$condition=="U" & deviance$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=precision$precision[precision$subNo==val & precision$condition=="I" & precision$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=precision$precision[precision$subNo==val & precision$condition=="U" & precision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="I" & lurePrecision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="U" & lurePrecision$setSize==val2 ]
}}
IPData$devZ=scale(log(IPData$dev))
IPData$precZ=scale(log(IPData$prec))
IPData$lurePrecZ=scale(log(IPData$lurePrec))
IPData$easyOfferZ=scale(log(IPData$easyOffer))
attach(IPData)
condition=as.factor(condition)
#core usage, not working
#n_cores <- detectCores()
#mycluster <- makeCluster(rep("localhost", n_cores-1))
}
mod3=glmer(choice~condition+setSize+easyOffer+(1+easyOffer+setSize+condition|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod3)
mod4=glmer(choice~condition+setSize+easyOffer+devZ+(1+easyOffer+setSize+condition+devZ|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod4)
mod5=glmer(choice~condition+easyOffer+setSize+devZ+(1+easyOffer+condition+setSize|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod5)
mod1.8=glmer(choice~condition+setSize+easyOffer+dev+(1+easyOffer+condition+setSize+dev|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod1.8)
mod1.9=glmer(choice~condition+setSize+easyOffer+dev+(1+easyOffer+setSize+condition|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod1.9)
summary(mod5)
summary(mod3)
anova(mod3,mod5)
rm(list=ls())
library(lme4)
experiment=1
doNoRedo=1
doDirect=0
if (experiment==2) {
directory=("P:\\3017048.04\\results\\Choices\\N62\\choicesRNR62.csv")
directoryDev=("P:\\3017048.04\\results\\Colorwheel\\N62\\MedianAcc62.csv")
directoryPrec=("P:\\3017048.04\\results\\Colorwheel\\N62\\precision62.csv")
directoryPrecLure=("P:\\3017048.04\\results\\Colorwheel\\N62\\precisionLure62.csv")
dirDirect=("P:\\3017048.04\\results\\Choices\\N62\\choicesRDir62.csv")
}else if (experiment==1) {
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRNR32.csv")
directoryDev=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\MedianAcc32.csv")
directoryPrec=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precision32.csv")
directoryPrecLure=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precisionLure32.csv")
dirDirect=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRDir32.csv")}
################## logistic regression model: No Redo
if (doNoRedo==1){
IPData=read.csv(file=directory,header=T,sep=',')
names(IPData)=c("participant","condition","setSize","easyOffer","choice","rt","block","button")
###performance data
devD=read.csv(file=directoryDev,header=T,sep=',') #deviance accuracy
attach(devD)
precD=read.csv(file=directoryPrec,header=T,sep=',') #precision accuracy
if (experiment==1) {
precD[ ,c(2,3)]=NULL}
attach(precD)
lurePrecD=read.csv(file=directoryPrecLure,header=T,sep=',') #precision from lure color
lurePrecD[ ,c(2,3)]=NULL
attach(lurePrecD)
#convert performance to long format
devLong=reshape(devD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
deviance=reshape2:::melt.data.frame(devLong,id.vars=c('subNo','setSize'),value.name="deviance",variable.name="condition",measure.vars=c("I","U"))
precLong=reshape(precD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
precision=reshape2:::melt.data.frame(precLong,id.vars=c('subNo','setSize'),value.name="precision",variable.name="condition",measure.vars=c("I","U"))
lurePrecLong=reshape(lurePrecD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
lurePrecision=reshape2:::melt.data.frame(lurePrecLong,id.vars=c('subNo','setSize'),value.name="lurePrecision",variable.name="condition",measure.vars=c("I","U"))
#replace no answer with NA in choice data
IPData$choice[IPData$choice==9]=NA
as.factor(IPData$condition)
IPData$dev=NA
IPData$prec=NA
IPData$lurePrec=NA
#assign deviance per cell
for (val in unique(IPData$participant)){
for (val2 in unique(IPData$setSize)){
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=deviance$deviance[deviance$subNo==val & deviance$condition=="I" & deviance$setSize==val2 ]
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=deviance$deviance[deviance$subNo==val & deviance$condition=="U" & deviance$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=precision$precision[precision$subNo==val & precision$condition=="I" & precision$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=precision$precision[precision$subNo==val & precision$condition=="U" & precision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="I" & lurePrecision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="U" & lurePrecision$setSize==val2 ]
}}
IPData$devZ=scale(log(IPData$dev))
IPData$precZ=scale(log(IPData$prec))
IPData$lurePrecZ=scale(log(IPData$lurePrec))
IPData$easyOfferZ=scale(log(IPData$easyOffer))
attach(IPData)
condition=as.factor(condition)
#core usage, not working
#n_cores <- detectCores()
#mycluster <- makeCluster(rep("localhost", n_cores-1))
}
mod3=glmer(choice~condition+setSize+easyOfferZ+(1+easyOfferZ+setSize+condition|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod3)
mod4=glmer(choice~condition+setSize+easyOfferZ+devZ+(1+easyOfferZ+setSize+condition+devZ|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod4)
mod5=glmer(choice~condition+easyOfferZ+setSize+devZ+(1+easyOfferZ+condition+setSize|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod5)
anova(mod3,mod5)
Vcov <- vcov(mod4, useScale = FALSE)
betas <- fixef(mod4)
se <- sqrt(diag(Vcov))
zval <- betas / se
pval <- 2 * pnorm(abs(zval), lower.tail = FALSE)
pval<-round(pval,digits=6)
cbind(betas, se, zval, pval)
rm(list=ls())
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\Data\\ChoiceTask\\IPGGplotDirect")
directory2=("P:\\3017048.04\\results\\Choices\\N62\\IPDirectBothStudiesOut.csv")
#directory=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPggplotDirect")
#directory=("C:\\Users\\Sara\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPGGplotDirect")
#directory2=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPmatrixAllOutliars15.csv")
#IPData$SV=IPData$IP/2
##parameters
longFormat=0
original=1
groups=1
##change the format from wide to long if necessary
if (longFormat==0) {
IPData=read.csv(file=directory2,header=T,sep=',')
IPData=IPData[ ,c(1,3,4,5,6)]
dataLong=reshape(IPData,varying =c( "X1","X2","X3","X4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
IPData=reshape2:::melt.data.frame(dataLong,id.vars=c('subNo','setSize'),value.name="IP")
}else{
IPData=read.csv(file=directory,header=F,sep=',')
names(IPData)=c("subNo","SV","IP","setSize")}
attach(IPData)
if (groups==1) {
IPDataI=IPData[IP>2, ]
IPDataU=IPData[IP<2, ]
}else{
#subset participants based on overall SV. svI:preference for Ignore
svI=c(1,4,5,17,33,56,36,27,29,30)
IPDataI=IPData[subNo %in% svI, ]
IPDataU=IPData[!(subNo %in% svI ), ] }
setSize=as.factor(setSize)
library("RColorBrewer")
library(Rmisc)
library(ggplot2)
IPI=summarySEwithin(IPDataI, measurevar="IP", withinvars=c("setSize"),idvar="subNo")
IPU=summarySEwithin(IPDataU, measurevar="IP", withinvars=c("setSize"),idvar="subNo")
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=4, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=2,stroke=1.9,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=2,stroke=1.9,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(data=IPI,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=2,stroke=1.9,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(data=IPI,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=2,stroke=1.5,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(data=IPI,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=1,stroke=1.5,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
View(IPData)
View(IPDataU)
View(IPI)
View(IPU)
View(IPData)
View(IPData)
rm(list=ls())
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\Data\\ChoiceTask\\IPGGplotDirect")
directory2=("P:\\3017048.04\\results\\Choices\\N62\\IPDirectBothStudiesOut.csv")
#directory=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPggplotDirect")
#directory=("C:\\Users\\Sara\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPGGplotDirect")
#directory2=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPmatrixAllOutliars15.csv")
#IPData$SV=IPData$IP/2
##parameters
longFormat=0
original=1
groups=1
##change the format from wide to long if necessary
if (longFormat==0) {
Data=read.csv(file=directory2,header=T,sep=',')
Data=Data[ ,c(1,3,4,5,6)]
dataLong=reshape(Data,varying =c( "X1","X2","X3","X4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
IPData=reshape2:::melt.data.frame(dataLong,id.vars=c('subNo','setSize'),value.name="IP")
}else{
IPData=read.csv(file=directory,header=F,sep=',')
names(IPData)=c("subNo","SV","IP","setSize")}
View(IPData)
View(Data)
View(Data)
View(IPData)
View(IPData)
View(Data)
rm(list=ls())
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\Data\\ChoiceTask\\IPGGplotDirect")
directory2=("P:\\3017048.04\\results\\Choices\\N62\\IPDirectBothStudiesOut.csv")
#directory=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPggplotDirect")
#directory=("C:\\Users\\Sara\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPGGplotDirect")
#directory2=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPmatrixAllOutliars15.csv")
#IPData$SV=IPData$IP/2
##parameters
longFormat=0
original=1
groups=1
##change the format from wide to long if necessary
if (longFormat==0) {
Data=read.csv(file=directory2,header=T,sep=',')
DataL=DataL[ ,c(1,3,4,5,6)]
dataLong=reshape(Data,varying =c( "X1","X2","X3","X4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
IPData=reshape2:::melt.data.frame(dataLong,id.vars=c('subNo','setSize'),value.name="IP")
}else{
IPData=read.csv(file=directory,header=F,sep=',')
names(IPData)=c("subNo","SV","IP","setSize")}
rm(list=ls())
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\Data\\ChoiceTask\\IPGGplotDirect")
directory2=("P:\\3017048.04\\results\\Choices\\N62\\IPDirectBothStudiesOut.csv")
#directory=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPggplotDirect")
#directory=("C:\\Users\\Sara\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPGGplotDirect")
#directory2=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPmatrixAllOutliars15.csv")
#IPData$SV=IPData$IP/2
##parameters
longFormat=0
original=1
groups=1
##change the format from wide to long if necessary
if (longFormat==0) {
Data=read.csv(file=directory2,header=T,sep=',')
DataL=Data[ ,c(1,3,4,5,6)]
dataLong=reshape(DataL,varying =c( "X1","X2","X3","X4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
IPData=reshape2:::melt.data.frame(dataLong,id.vars=c('subNo','setSize'),value.name="IP")
}else{
IPData=read.csv(file=directory,header=F,sep=',')
names(IPData)=c("subNo","SV","IP","setSize")}
View(Data)
View(Data)
subI=Data$subNo[Data$IP>2, ]
subU=Data$subNo[Data$IP<2, ]
subI=Data$subNo[Data$IP>2]
subI
subI=Data$subNo[Data$IP>2]
subU=Data$subNo[Data$IP<2]
IPDataI=IPData[subNo %in% subI, ]
View(IPDataI)
View(IPDataI)
rm(list=ls())
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\Data\\ChoiceTask\\IPGGplotDirect")
directory2=("P:\\3017048.04\\results\\Choices\\N62\\IPDirectBothStudiesOut.csv")
#directory=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPggplotDirect")
#directory=("C:\\Users\\Sara\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPGGplotDirect")
#directory2=("C:\\Users\\Danae\\Documents\\GitHub\\backup\\QuantifyingCC\\Log\\ChoiceTask\\IPmatrixAllOutliars15.csv")
#IPData$SV=IPData$IP/2
##parameters
longFormat=0
original=1
groups=1
##change the format from wide to long if necessary
if (longFormat==0) {
Data=read.csv(file=directory2,header=T,sep=',')
DataL=Data[ ,c(1,3,4,5,6)]
dataLong=reshape(DataL,varying =c( "X1","X2","X3","X4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
IPData=reshape2:::melt.data.frame(dataLong,id.vars=c('subNo','setSize'),value.name="IP")
}else{
IPData=read.csv(file=directory,header=F,sep=',')
names(IPData)=c("subNo","SV","IP","setSize")}
View(IPData)
attach(IPData)
subI=Data$subNo[Data$IP>2]
subU=Data$subNo[Data$IP<2]
IPDataI=IPData[subNo %in% subI, ]
IPDataU=IPData[subNo %in% subU, ]
#for thesis data
#IPData=IPData[subNo<=28, ]
if (original==1) {
IPDataCor=IPData[subNo!=23 &  subNo!=8, ]
}else{
IPDataCor=IPData}
#IPDataI=IPData[IP>2, ]
#IPDataU=IPData[IP<2, ]
#if (groups==1) {
# IPDataI=IPData[IP>2, ]
#IPDataU=IPData[IP<2, ]
#}else{
##subset participants based on overall SV. svI:preference for Ignore
# svI=c(1,4,5,17,33,56,36,27,29,30)
#IPDataI=IPData[subNo %in% svI, ]
#IPDataU=IPData[!(subNo %in% svI ), ] }
setSize=as.factor(setSize)
library("RColorBrewer")
library(Rmisc)
library(ggplot2)
#barplot
IPDataS=summarySEwithin(IPDataCor, measurevar="SV", withinvars=c("setSize"),idvar="subNo")
IPDataSIP=summarySEwithin(IPDataCor, measurevar="IP", withinvars=c("setSize"),idvar="subNo")
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(data=IPI,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=1,stroke=1.5,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
IPI=summarySEwithin(IPDataI, measurevar="IP", withinvars=c("setSize"),idvar="subNo")
IPU=summarySEwithin(IPDataU, measurevar="IP", withinvars=c("setSize"),idvar="subNo")
#two groups
graph3=ggplot(data=IPI, aes(x = as.factor(setSize), y = IP, group=1,lty="Ignore"))  +
geom_errorbar(data=IPI,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+geom_line(size=1.45)+geom_point(size=2, shape=21,stroke=1.2,color="black",fill='black')
graph3 +labs(list(x = "Set size", y = "Indifference Point"))+ coord_cartesian(ylim=c(1, 3)) +
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
geom_hline(aes(yintercept = 2),linetype='dashed',colour='grey')+
geom_segment(x=1,xend=4.01,y=0.9,yend=0.9,color='black',size=0.75)+geom_segment(x=0.402,xend=0.402,y=0.9999,yend=3,color='black',size=0.65)+ scale_linetype('Preference')+
geom_errorbar(data=IPU,aes(ymin=IP-se, ymax=IP+se), width = 0.08,size=1.3)+ geom_line(data=IPU, size=1.45,aes(lty="Update"))+
geom_point(data=IPU, size=1,stroke=1.5,shape=23,fill='white')+
theme(legend.text=element_text(size=28), legend.title=element_text(size=33))+theme_classic()+
theme(axis.title.y=element_text(margin=margin(0,34,0,0)))+  theme(axis.title.x=element_text(margin=margin(34,0,0)))+theme(axis.ticks.length = unit(.3, "cm"))+
theme(axis.line=element_blank(),text = element_text(size=33))
ggsave("twoGroups.pdf", height=6,width=7)
View(IPU)
View(IPU)
View(IPI)
View(IPI)
rm(list=ls())
library(lme4)
experiment=1
doNoRedo=1
doDirect=0
if (experiment==2) {
directory=("P:\\3017048.04\\results\\Choices\\N62\\choicesRNR62.csv")
directoryDev=("P:\\3017048.04\\results\\Colorwheel\\N62\\MedianAcc62.csv")
directoryPrec=("P:\\3017048.04\\results\\Colorwheel\\N62\\precision62.csv")
directoryPrecLure=("P:\\3017048.04\\results\\Colorwheel\\N62\\precisionLure62.csv")
dirDirect=("P:\\3017048.04\\results\\Choices\\N62\\choicesRDir62.csv")
}else if (experiment==1) {
directory=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRNR32.csv")
directoryDev=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\MedianAcc32.csv")
directoryPrec=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precision32.csv")
directoryPrecLure=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Colorwheel\\N32\\precisionLure32.csv")
dirDirect=("M:\\.matlab\\GitHub\\backup\\QuantifyingCC\\results\\Choices\\N32\\choicesRDir32.csv")}
################## logistic regression model: No Redo
if (doNoRedo==1){
IPData=read.csv(file=directory,header=T,sep=',')
names(IPData)=c("participant","condition","setSize","easyOffer","choice","rt","block","button")
###performance data
devD=read.csv(file=directoryDev,header=T,sep=',') #deviance accuracy
attach(devD)
precD=read.csv(file=directoryPrec,header=T,sep=',') #precision accuracy
if (experiment==1) {
precD[ ,c(2,3)]=NULL}
attach(precD)
lurePrecD=read.csv(file=directoryPrecLure,header=T,sep=',') #precision from lure color
lurePrecD[ ,c(2,3)]=NULL
attach(lurePrecD)
#convert performance to long format
devLong=reshape(devD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
deviance=reshape2:::melt.data.frame(devLong,id.vars=c('subNo','setSize'),value.name="deviance",variable.name="condition",measure.vars=c("I","U"))
precLong=reshape(precD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
precision=reshape2:::melt.data.frame(precLong,id.vars=c('subNo','setSize'),value.name="precision",variable.name="condition",measure.vars=c("I","U"))
lurePrecLong=reshape(lurePrecD,varying =c( "I1","I2","I3","I4","U1","U2","U3","U4"),direction = "long",idvar = "subNo",timevar="setSize",sep="")
lurePrecision=reshape2:::melt.data.frame(lurePrecLong,id.vars=c('subNo','setSize'),value.name="lurePrecision",variable.name="condition",measure.vars=c("I","U"))
#replace no answer with NA in choice data
IPData$choice[IPData$choice==9]=NA
as.factor(IPData$condition)
IPData$dev=NA
IPData$prec=NA
IPData$lurePrec=NA
#assign deviance per cell
for (val in unique(IPData$participant)){
for (val2 in unique(IPData$setSize)){
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=deviance$deviance[deviance$subNo==val & deviance$condition=="I" & deviance$setSize==val2 ]
IPData$dev[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=deviance$deviance[deviance$subNo==val & deviance$condition=="U" & deviance$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=precision$precision[precision$subNo==val & precision$condition=="I" & precision$setSize==val2 ]
IPData$prec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=precision$precision[precision$subNo==val & precision$condition=="U" & precision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==0]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="I" & lurePrecision$setSize==val2 ]
IPData$lurePrec[IPData$participant==val & IPData$setSize==val2 & IPData$condition==2]=lurePrecision$lurePrecision[lurePrecision$subNo==val & lurePrecision$condition=="U" & lurePrecision$setSize==val2 ]
}}
IPData$devZ=scale(log(IPData$dev))
IPData$precZ=scale(log(IPData$prec))
IPData$lurePrecZ=scale(log(IPData$lurePrec))
IPData$easyOfferZ=scale(log(IPData$easyOffer))
attach(IPData)
condition=as.factor(condition)
#core usage, not working
#n_cores <- detectCores()
#mycluster <- makeCluster(rep("localhost", n_cores-1))
}
IPData$devZ=scale(log(IPData$dev))
IPData$precZ=scale(log(IPData$prec))
IPData$lurePrecZ=scale(log(IPData$lurePrec))
IPData$easyOfferZ=scale((IPData$easyOffer))
attach(IPData)
condition=as.factor(condition)
mod3=glmer(choice~condition+setSize+easyOfferZ+(1+easyOfferZ+setSize+condition|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod3)
mod4=glmer(choice~condition+setSize+easyOfferZ+devZ+(1+easyOfferZ+setSize+condition+devZ|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod4)
mod5=glmer(choice~condition+easyOfferZ+setSize+devZ+(1+easyOfferZ+condition+setSize|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod5)
IPData$devZ=scale((IPData$dev))
IPData$precZ=scale(log(IPData$prec))
IPData$lurePrecZ=scale(log(IPData$lurePrec))
IPData$easyOfferZ=scale((IPData$easyOffer))
attach(IPData)
condition=as.factor(condition)
mod3=glmer(choice~condition+setSize+easyOfferZ+(1+easyOfferZ+setSize+condition|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod3)
mod4=glmer(choice~condition+setSize+easyOfferZ+devZ+(1+easyOfferZ+setSize+condition+devZ|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod4)
mod5=glmer(choice~condition+easyOfferZ+setSize+devZ+(1+easyOfferZ+condition+setSize|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod5)
anova(mod3,mod5)
Vcov <- vcov(mod4, useScale = FALSE)
betas <- fixef(mod4)
se <- sqrt(diag(Vcov))
zval <- betas / se
pval <- 2 * pnorm(abs(zval), lower.tail = FALSE)
pval<-round(pval,digits=6)
cbind(betas, se, zval, pval)
summary(mod4)
summary(mod3)
summary(mod5)
mod4=glmer(choice~condition+setSize+easyOfferZ+devZ+(1+easyOfferZ+setSize+condition+devZ|participant),data=IPData,REML="false",family=binomial,control = glmerControl(optimizer =c("Nelder_Mead", "bobyqa"), optCtrl = list(maxfun=1e+9)))
summary(mod4)
