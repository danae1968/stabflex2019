function  modelingAnal(io,varargin)

switch nargin
    case 2
        varargin{2}
    case 1
        filename=fullfile(io.resultsDir,'modelsCompCondNorm.mat');
        load(filename,'model_results');
end

devI_U=xlsread(fullfile(io.resultsDir,'correlationsIPsPooled.csv'),'G2:G75');
% noOutliers=xlsread('P:\3017048.04\stabflex2019\results\Pooled\correlationsIPsPooled.csv','A2:A75');
noOutliers=io.noOutliers;

filenameDir=fullfile(io.resultsDir,'directPooled.csv'); %direct comparison choice results
direct=readtable(filenameDir);

%find best model
minBic=min(mean(model_results.bic));
minAic=min(mean(model_results.aic));
indexAic=mean(model_results.aic)== minAic;
indexBic=mean(model_results.bic)== minBic;

TaskBic=mean(model_results.bic(:,:,1)); %across conditions
IgnBic=mean(model_results.bic(:,:,2));
UpdBic=mean(model_results.bic(:,:,3));

winBicTask= model_results.model_names(indexBic(:,:,1)); %across conditions
winBicIgn= model_results.model_names(indexBic(:,:,2));
winBicUpd=model_results.model_names(indexBic(:,:,3));
winAicTask= model_results.model_names(indexAic(:,:,1));
winAicIgn= model_results.model_names(indexAic(:,:,2));
winAicUpd=model_results.model_names(indexAic(:,:,3));

%discounting parameter of winning model

for sub=1:length(model_results.params)
    for conInd=1:length(io.condNames)% one column for each condition (across/ignore/update)
        kappa(sub,conInd)=[model_results.params{sub,indexBic(:,:,conInd),conInd}(1)];
        beta(sub,conInd)=[model_results.params{sub,indexBic(:,:,conInd),conInd}(2)];
        
    end
end

%% find best model per participant
minPP=min(model_results.bic,[],2);
indexPP=model_results.bic==minPP;
%find participants who prefer ignore and update
prefI=intersect(direct.subNo(direct.IP>2),noOutliers);
prefU=intersect(direct.subNo(direct.IP<2),noOutliers);
devI=intersect(noOutliers(devI_U<0),noOutliers);
devU=intersect(noOutliers(devI_U>0),noOutliers);

bicN=[noOutliers model_results.bic(:,:,1)]; %across condition
aicN=[noOutliers model_results.aic(:,:,1)]; %across condition

ignoreModPrefBic=mean(bicN(ismember(noOutliers,prefI),2:end));
updateModPrefBic=mean(bicN(ismember(noOutliers,prefU),2:end));

ignoreModDevBic=mean(bicN(ismember(noOutliers,devI),2:end));
updateModDevBic=mean(bicN(ismember(noOutliers,devU),2:end));

ignoreModPrefAic=mean(aicN(ismember(noOutliers,prefI),2:end));
updateModPrefAic=mean(aicN(ismember(noOutliers,prefU),2:end));

ignoreModDevAic=mean(aicN(ismember(noOutliers,devI),2:end));
updateModDevAic=mean(aicN(ismember(noOutliers,devU),2:end));

for n=1:size(indexPP,2)
    bestMod(indexPP(:,n)==1)=n;
end
bestModName=model_results.model_names(bestMod);

%make variable for preference based on direct comparison
preference=NaN(length(noOutliers),1);
preference(ismember(noOutliers,prefI))=0;
preference(ismember(noOutliers,prefU))=2;


%% save data

if io.saveD
    outputFile='P:\3017048.04\stabflex2019\results\Pooled\discParamsCondFin.csv';
    outputFileOut='P:\3017048.04\stabflex2019\results\Pooled\discParamsCondFinOutl.csv';
    
    names={'sub','kappa','kappa_I','kappa_U','beta','beta_I','beta_U','bestModel','preference'};
    paramMat=[noOutliers kappa beta];
    writetable(cell2table([names;num2cell([noOutliers kappa beta bestMod' preference])]),outputFile,'writevariablenames',0)
    
    [outliers,paramOut]=findOutliers(paramMat(paramMat(:,1)~=46,:));outliers=[outliers;46]; %add participant who pressed only 1 button in outliers and estimate outliers without them
    
    if ~isempty(outliers)
        writetable(cell2table([names;num2cell(paramOut)]),outputFileOut,'writevariablenames',0)
    end
    
end
